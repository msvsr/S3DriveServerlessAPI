AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  S3DriveAPI

  S3Drive: To store files
  DynamoTable: To store file details.
  S3DriveAPIGateway: To get presigned url for s3 bucket.
  GetPresignedURLLambda: Generates presigned url


Resources:
  S3Drive:
    Type: AWS::S3::Bucket
    Properties:
        # TODO : Add Life Cycle configuration for moving to Glacier
        BucketName: !Sub "${AWS::StackName}-${AWS::Region}-s3drive"
        VersioningConfiguration:
          Status: Enabled

  DynamoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-${AWS::Region}-dynamotable"
      PrimaryKey:
        Name: uuid
        Type: String

  S3DriveAPIGateway:
    Type: AWS::Serverless::Api
    MethodSettings:
      HttpMethod: '*'
      ResourcePath: '*/'
    Properties:
      Name: !Sub "${AWS::StackName}-${AWS::Region}-getpresignedurl"
      StageName: v1
      Cors:
        AllowOrigin: "'*'"
        AllowMethods: "'OPTIONS,HEAD,GET,PUT,POST,DELETE'"

  GetPresignedURLLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambdas/presigned_url
      Handler: generate_presigned_url.lambda_handler
      Role: !GetAtt S3PresignedRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Drive
          REGION: !Sub "${AWS::Region}"
      Events:
        GetPresignedURL:
          Type: Api
          Properties:
            Path: /getpresignedurl/{filename}
            Method: GET
            RestApiId: !Ref S3DriveAPIGateway

  S3PutObjectDynamoLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambdas/dynamodb_ops
      Handler: s3_put_object.lambda_handler
      Role: !GetAtt S3PresignedRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoTable
          REGION: !Sub "${AWS::Region}"
      Events:
        S3PutObject:
          Type: S3
          Properties:
            Bucket:
              Ref: S3Drive
            Events:
              - 's3:ObjectCreated:*'

  S3PresignedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}-S3PresignedRole'

  DynamoDBPUTRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}-DynamoDBPUTRole'

  S3PresignedBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-S3PresignedBucketPolicy'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:PutObject'
            Resource: !Join [ '', [ !GetAtt S3Drive.Arn, '/*' ] ]
      Roles:
        - !Ref S3PresignedRole

  DyanmoDBPUTPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-DynamoDBPUTPolicy'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
            Resource: !GetAtt DynamoTable.Arn
      Roles:
        - !Ref DynamoDBPUTRole

  CloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-CloudWatchLogsPolicy'
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
            Resource:
              - 'arn:aws:logs:*:*:*'
      Roles:
        - !Ref S3PresignedRole
        - !Ref DynamoDBPUTRole
